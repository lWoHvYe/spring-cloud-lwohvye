spring.profiles.active=dev
#指定服务端口号，与另一层端口号需不一致
server.port=8086
server.http2.enabled=true
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
# 不要设置过大，如果过大，启动项目会报错：打开文件数过多
server.undertow.io-threads=6
# 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
# 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
server.undertow.worker-threads=48
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
#server.undertow.buffer-size= 1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#server.undertow.buffers-per-region= 1024
# 是否分配的直接内存(NIO直接分配的堆外内存)
server.undertow.direct-buffers=true
# Spring boot application
spring.application.name=lwohvye-provider
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#MYSQL
#spring.datasource.druid.mysql.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.druid.mysql.url=jdbc:mysql://127.0.0.1:3306/spring_shiro?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&useSSL=false
#spring.datasource.druid.mysql.username=root
#spring.datasource.druid.mysql.password=root
##ORACLE
#spring.datasource.druid.oracle.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.druid.oracle.url=jdbc:oracle:thin:@127.0.0.1:1521:ORCL
#spring.datasource.druid.oracle.username=c##root
#spring.datasource.druid.oracle.password=root
#Master主数据源
spring.datasource.druid.master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.master.url=jdbc:mysql://192.168.0.145:3340/spring_shiro?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.druid.master.username=root
spring.datasource.druid.master.password=root
##########################  druid配置   ##########################
# 下面为连接池的补充设置，应用到上面所有数据源中# 初始化大小，最小，最大
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.master.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.master.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.master.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.master.max-wait=6000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.master.pool-prepared-statements=true
spring.datasource.druid.master.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.master.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.master.validation-query-timeout=3000
#是否在获得连接后检测其可用性
spring.datasource.druid.master.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.master.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.master.test-while-idle=true
#Slave从数据源
spring.datasource.druid.slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.slave.url=jdbc:mysql://192.168.0.145:3339/spring_shiro?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.druid.slave.username=root
spring.datasource.druid.slave.password=root
##########################  druid配置   ##########################
# 下面为连接池的补充设置，应用到上面所有数据源中# 初始化大小，最小，最大
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.slave.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.slave.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.slave.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.slave.max-wait=6000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.slave.pool-prepared-statements=true
spring.datasource.druid.slave.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.slave.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.slave.validation-query-timeout=3000
#是否在获得连接后检测其可用性
spring.datasource.druid.slave.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.slave.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.slave.test-while-idle=true
#logging.level.root=WARN
#logging.level.org.springframework.web=DEBUG
#logging.level.org.mybatis=ERROR
#logging.file=${CATALINA_HOME}/logs/shiro2springboot.log
#logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
#logging.pattern.file=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
logging.config=classpath:logback-spring.xml
#输出mapper.xml中sql
logging.level.com.lwohvye.springcloud.springcloudlwohvyeprovider.dao=debug
#暂时解决同一服务器上多springboot项目报错问题，需进一步解决
spring.jmx.enabled=false
#spring.jpa.database=MYSQL
spring.jpa.show-sql=true
#解决延迟加载
#spring.jpa.properties.hibernate.enable_lazy_load_on_trans=true
spring.jpa.open-in-view=false
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#mybatis
mybatis.type-aliases-package=com.lwohvye.springcloud.springcloudlwohvyeapi.entity
#mybatis配置文件
mybatis.config-location=classpath:mybatis/mybatis.cfg.xml
#主从库在不同的包内
mybatis.master.mapper-locations=classpath:mybatis/mapper/master/*.xml
mybatis.slave.mapper-locations=classpath:mybatis/mapper/slave/*.xml
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
#thymeleaf
#spring.thymeleaf.cache=false
#spring.thymeleaf.mode=HTML
#spring.main.allow-bean-definition-overriding=true
#整合redis，使用lettuce client
spring.redis.database=0
spring.redis.host=192.168.0.145
spring.redis.port=6380
spring.redis.password=redis
spring.redis.lettuce.pool.max-active=10
spring.redis.lettuce.pool.max-wait=-1
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0
spring.redis.timeout=1000
#springboot-2.2 新增全局延迟初始化配置，配置后导致PageHelper分页插件失效，需注意
#spring.main.lazy-initialization=true
#配置是否使用swagger
#swagger.enable=true
#pagehelper相关配置
#pagehelper.helper-dialect=mysql
#开启优化，如果开启优化，在分页页码结果没有数据的时候,会显示有数据的页码数据
pagehelper.reasonable=true
##是否支持接口参数来传递分页参数，默认false
pagehelper.support-methods-arguments=true
# 默认false,当为true时，自动检验适合的数据库
pagehelper.auto-dialect=true
# 这个一定要加上，不然master和slave分页两个只能用一个，另一个会报错，加上后，两中数据库分页都可以用了
pagehelper.auto-runtime-dialect=true
##pageSize=0 返回所有
#pagehelper.page-size-zero=false
#pagehelper.params=count=countSql
#配置是否使用swagger
swagger.enable=true
#SpringCloud相关配置
#Eureka服务注册与发现
#客户端注册进eureka服务列表内
#eureka.client.service-url.defaultZone=http://localhost:7001/eureka
eureka.client.service-url.defaultZone=http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
#自定义服务名称信息
eureka.instance.instance-id=lwohvye-provider-8086
#访问路径可以显示IP地址
eureka.instance.prefer-ip-address=true

info.app.name=spring-cloud-lwohvye
info.build.artifactId=$project.artifactId$
info.build.version=$project.version$