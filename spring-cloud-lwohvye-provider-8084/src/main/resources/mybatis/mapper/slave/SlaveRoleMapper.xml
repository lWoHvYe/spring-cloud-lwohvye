<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwohvye.springcloud.springcloudlwohvyeprovider.dao.slave.SlaveRoleMapper">
    <resultMap id="BaseResultMap" type="com.lwohvye.springcloud.springcloudlwohvyeapi.entity.Role">
        <!--@mbg.generated-->
        <!--@Table role-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="available" jdbcType="BIT" property="available"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <!--角色与权限是多对多的关系，因为返回的permission要放在List中，所以需要指定javaType="ArrayList"-->
        <!--        <collection property="permissions" javaType="ArrayList"-->
        <!--                    ofType="com.lwohvye.springcloud.springcloudlwohvyeapi.entity.Permission">-->
        <!--            <id property="id" column="pid"/>-->
        <!--            <result property="name" column="name"/>-->
        <!--            <result property="permissionStr" column="permission_str"/>-->
        <!--            <result property="available" column="pavail"/>-->
        <!--            <result property="parentId" column="parent_id"/>-->
        <!--            <result property="parentIds" column="parent_ids"/>-->
        <!--            <result property="resourceType" column="resource_type"/>-->
        <!--            <result property="url" column="url"/>-->
        <!--        </collection>-->
        <!--可以使用上面的方式，也可以使用前缀来匹配，这种配置方式更简单一点，但未必适用于多层关联-->
        <collection property="permissions" columnPrefix="p_"
                    resultMap="com.lwohvye.springcloud.springcloudlwohvyeprovider.dao.slave.SlavePermissionMapper.BaseResultMap">
        </collection>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, available, description, role_name
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        r.id, r.available, r.description,r.role_name,
        p.id p_id,p.available p_available,p.name p_name,p.parent_id p_parent_id,p.parent_ids
        p_parent_ids,p.permission_str p_permission_str,p.resource_type p_resource_type,p.url p_url
        from role r inner join role_permission rp on r.id = rp.role_id
        inner join permission p on rp.permission_id = p.id
        where r.id = #{id,jdbcType=BIGINT}
    </select>
</mapper>